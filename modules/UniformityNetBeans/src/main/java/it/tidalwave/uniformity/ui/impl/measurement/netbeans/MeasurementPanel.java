/***********************************************************************************************************************
 *
 * blueArgyle - a Java UI for Argyll
 * Copyright (C) 2011-2012 by Tidalwave s.a.s. (http://www.tidalwave.it)
 *
 ***********************************************************************************************************************
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 *
 ***********************************************************************************************************************
 *
 * WWW: http://blueargyle.java.net
 * SCM: https://bitbucket.org/tidalwave/blueargyle-src
 *
 **********************************************************************************************************************/
package it.tidalwave.uniformity.ui.impl.measurement.netbeans;

import javax.annotation.Nonnull;
import java.awt.Color;
import java.awt.EventQueue;
import javax.swing.JPanel;

/***********************************************************************************************************************
 * 
 * @stereotype Presentation
 * 
 * @author  Fabrizio Giudici
 * @version $Id$
 *
 **********************************************************************************************************************/
public class MeasurementPanel extends JPanel 
  {
    public MeasurementPanel() 
      {
        assert EventQueue.isDispatchThread();
        initComponents();
        setOpaque(true);
        setBackground(UniformityCheckMeasurementPresentationPanel.DEFAULT_BACKGROUND);
      }

    public MeasurementPanel (final @Nonnull String luminance, final @Nonnull String whitePoint)
      {
        this();
        lbLuminance.setText(luminance);
        lbWhitePoint.setText(whitePoint);
      }
    
    /*******************************************************************************************************************
     * 
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     *
     ******************************************************************************************************************/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbLuminance = new javax.swing.JLabel();
        lbWhitePoint = new javax.swing.JLabel();

        setName(org.openide.util.NbBundle.getMessage(MeasurementPanel.class, "MeasurementPanel.name")); // NOI18N

        lbLuminance.setFont(lbLuminance.getFont().deriveFont(lbLuminance.getFont().getStyle() | java.awt.Font.BOLD, lbLuminance.getFont().getSize()+2));
        lbLuminance.setForeground(new java.awt.Color(255, 255, 255));
        lbLuminance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbLuminance.setText(org.openide.util.NbBundle.getMessage(MeasurementPanel.class, "MeasurementPanel.lbLuminance.text")); // NOI18N
        lbLuminance.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbLuminance.setName(org.openide.util.NbBundle.getMessage(MeasurementPanel.class, "MeasurementPanel.lbLuminance.name")); // NOI18N

        lbWhitePoint.setFont(lbWhitePoint.getFont().deriveFont(lbWhitePoint.getFont().getStyle() | java.awt.Font.BOLD, lbWhitePoint.getFont().getSize()+3));
        lbWhitePoint.setForeground(new java.awt.Color(255, 255, 255));
        lbWhitePoint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbWhitePoint.setText(org.openide.util.NbBundle.getMessage(MeasurementPanel.class, "MeasurementPanel.lbWhitePoint.text")); // NOI18N
        lbWhitePoint.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbWhitePoint.setName(org.openide.util.NbBundle.getMessage(MeasurementPanel.class, "MeasurementPanel.lbWhitePoint.name")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbLuminance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbWhitePoint, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbLuminance, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbWhitePoint, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbLuminance;
    private javax.swing.JLabel lbWhitePoint;
    // End of variables declaration//GEN-END:variables
  }
